// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stack.DAL;

namespace Stack.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Activity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<long>("ProcessFlowID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubtmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("ProcessFlowID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ActivitySection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("SectionID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("SectionID");

                    b.ToTable("ActivitySections");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ActivityType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ProcessFlow", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<long?>("DealID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ContactID")
                        .IsUnique();

                    b.HasIndex("CustomerID");

                    b.HasIndex("DealID")
                        .IsUnique()
                        .HasFilter("[DealID] IS NOT NULL");

                    b.ToTable("ProcessFlows");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Section", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityTypeID")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasCreateInterest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCreateRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCreateResale")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDecisionalQuestions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestion", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDecisional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("SectionID")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.ToTable("SectionQuestions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionAnswer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivitySectionID")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionID")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ActivitySectionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("SectionQuestionAnswers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionID")
                        .HasColumnType("bigint");

                    b.Property<string>("RoutesTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("SectionQuestionOptions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SelectedOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("SectionQuestionAnswerID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SectionQuestionOptionID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("SectionQuestionAnswerID")
                        .IsUnique()
                        .HasFilter("[SectionQuestionAnswerID] IS NOT NULL");

                    b.HasIndex("SectionQuestionOptionID");

                    b.ToTable("SelectedOptions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SubmissionDetails", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStatusChanged")
                        .HasColumnType("bit");

                    b.Property<string>("NewStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ScheduledActivityID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityID")
                        .IsUnique();

                    b.HasIndex("ScheduledActivityID");

                    b.ToTable("SubmissionDetails");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.Area_LOneInterest", b =>
                {
                    b.Property<long>("AreaID")
                        .HasColumnType("bigint");

                    b.Property<long>("LOneInterestID")
                        .HasColumnType("bigint");

                    b.HasKey("AreaID", "LOneInterestID");

                    b.HasIndex("LOneInterestID");

                    b.ToTable("Area_LOneInterests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.InterestAttribute", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("InterestAttributes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LOneInterest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("LOneInterests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LOneInterestInput", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LOneInterestInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LOneInterest_InterestAttributes", b =>
                {
                    b.Property<long>("LOneInterestID")
                        .HasColumnType("bigint");

                    b.Property<long>("InterestAttributeID")
                        .HasColumnType("bigint");

                    b.HasKey("LOneInterestID", "InterestAttributeID");

                    b.ToTable("LOneInterest_InterestAttributes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LOneInterest_LOneInterestInput", b =>
                {
                    b.Property<long>("LOneInterestID")
                        .HasColumnType("bigint");

                    b.Property<long>("LOneInterestInputID")
                        .HasColumnType("bigint");

                    b.HasKey("LOneInterestID", "LOneInterestInputID");

                    b.HasIndex("LOneInterestInputID");

                    b.ToTable("LOneInterest_LOneInterestInput");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isStandalone")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("LThreeInterests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LThreeInterestInput", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LThreeInterestInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest_InterestAttributes", b =>
                {
                    b.Property<long>("LThreeInterestID")
                        .HasColumnType("bigint");

                    b.Property<long>("InterestAttributeID")
                        .HasColumnType("bigint");

                    b.HasKey("LThreeInterestID", "InterestAttributeID");

                    b.ToTable("LThreeInterest_InterestAttributes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest_LThreeInterestInput", b =>
                {
                    b.Property<long>("LThreeInterestID")
                        .HasColumnType("bigint");

                    b.Property<long>("LThreeInterestInputID")
                        .HasColumnType("bigint");

                    b.HasKey("LThreeInterestID", "LThreeInterestInputID");

                    b.HasIndex("LThreeInterestInputID");

                    b.ToTable("LThreeInterest_LThreeInterestInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("LOneInterestID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LOneInterestID");

                    b.ToTable("LTwoInterests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterestInput", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LTwoInterestInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest_InterestAttributes", b =>
                {
                    b.Property<long>("LTwoInterestID")
                        .HasColumnType("bigint");

                    b.Property<long>("InterestAttributeID")
                        .HasColumnType("bigint");

                    b.HasKey("LTwoInterestID", "InterestAttributeID");

                    b.ToTable("LTwoInterest_InterestAttributes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest_LTwoInterestInput", b =>
                {
                    b.Property<long>("LTwoInterestID")
                        .HasColumnType("bigint");

                    b.Property<long>("LTwoInterestInputID")
                        .HasColumnType("bigint");

                    b.HasKey("LTwoInterestID", "LTwoInterestInputID");

                    b.HasIndex("LTwoInterestInputID");

                    b.ToTable("LTwoInterest_LTwoInterestInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Area", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RegionID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Area_Pool", b =>
                {
                    b.Property<long>("AreaID")
                        .HasColumnType("bigint");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.HasKey("AreaID", "PoolID");

                    b.HasIndex("PoolID");

                    b.ToTable("Area_Pools");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LeadSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadSourceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PoolID");

                    b.HasIndex("StatusID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactComment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ContactComments");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactPhoneNumber", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ContactPhoneNumbers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContactStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact_Tag", b =>
                {
                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<long>("TagID")
                        .HasColumnType("bigint");

                    b.HasKey("ContactID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("Contact_Tags");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.CustomerPhoneNumber", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerPhoneNumber");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer_Tag", b =>
                {
                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<long>("TagID")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("Customer_Tags");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Deal", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Lead", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isJunked")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.HasIndex("StatusID");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.LeadStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LeadID")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LeadStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Opportunity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isJunked")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.HasIndex("StatusID");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.OpportunityStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OpportunityID")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OpportunityStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ConfigurationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pools");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool_Admin", b =>
                {
                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PoolID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Pool_Admins");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool_Users", b =>
                {
                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PoolID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Pool_Users");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Prospect", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isJunked")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.HasIndex("StatusID");

                    b.ToTable("Prospects");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ProspectStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ProspectID")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ProspectStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Tag", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Region.Region", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Activity", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Activities.ProcessFlow", "ProcessFlow")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessFlowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ActivitySection", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.Activity", "Activity")
                        .WithMany("ActivitySections")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Activities.Section", "Section")
                        .WithMany("ActivitySections")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ProcessFlow", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithOne("ProcessFlow")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.ProcessFlow", "ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("ProcessFlows")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithOne("ProcessFlow")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.ProcessFlow", "DealID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Section", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivityType", "ActivityType")
                        .WithMany("Sections")
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestion", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionAnswer", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivitySection", "ActivitySection")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ActivitySectionID");

                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestion", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionOption", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestion", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SelectedOption", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestionAnswer", "SectionQuestionAnswer")
                        .WithOne("SelectedOption")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.SelectedOption", "SectionQuestionAnswerID");

                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestionOption", "SectionQuestionOption")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("SectionQuestionOptionID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SubmissionDetails", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.Activity", "Activity")
                        .WithOne("SubmissionDetails")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.SubmissionDetails", "ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivityType", "ScheduledActivity")
                        .WithMany("SubmissionDetails")
                        .HasForeignKey("ScheduledActivityID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.Area_LOneInterest", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Areas.Area", "Area")
                        .WithMany("Interests")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LOneInterest", "Interest")
                        .WithMany("Area_LOneInterests")
                        .HasForeignKey("LOneInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LOneInterest_InterestAttributes", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.InterestAttribute", "InterestAttribute")
                        .WithMany("LevelOne")
                        .HasForeignKey("LOneInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LOneInterest", "LOneInterest")
                        .WithMany("Attributes")
                        .HasForeignKey("LOneInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LOneInterest_LOneInterestInput", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LOneInterest", "LOneInterest")
                        .WithMany("Inputs")
                        .HasForeignKey("LOneInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LOneInterestInput", "LOneInterestInput")
                        .WithMany("LOneInterest_LOneInterestInputs")
                        .HasForeignKey("LOneInterestInputID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest_InterestAttributes", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.InterestAttribute", "InterestAttribute")
                        .WithMany("LevelThree")
                        .HasForeignKey("LThreeInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest", "LThreeInterest")
                        .WithMany("Attributes")
                        .HasForeignKey("LThreeInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest_LThreeInterestInput", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LThreeInterest", "LThreeInterest")
                        .WithMany("Inputs")
                        .HasForeignKey("LThreeInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LThreeInterestInput", "LThreeInterestInput")
                        .WithMany("LThreeInterest_LThreeInterestInput")
                        .HasForeignKey("LThreeInterestInputID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LOneInterest", null)
                        .WithMany("LTwoInterests")
                        .HasForeignKey("LOneInterestID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest_InterestAttributes", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.InterestAttribute", "InterestAttribute")
                        .WithMany("LevelTwo")
                        .HasForeignKey("LTwoInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest", "LTwoInterest")
                        .WithMany("Attributes")
                        .HasForeignKey("LTwoInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest_LTwoInterestInput", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LTwoInterest", "LTwoInterest")
                        .WithMany("Inputs")
                        .HasForeignKey("LTwoInterestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.AreaInterest.LTwoInterestInput", "LTwoInterestInput")
                        .WithMany("LTwoInterest_LTwoInterestInputs")
                        .HasForeignKey("LTwoInterestInputID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Area", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Region.Region", null)
                        .WithMany("Areas")
                        .HasForeignKey("RegionID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Area_Pool", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Areas.Area", "Area")
                        .WithMany("Pools")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Area_Pools")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Contacts")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Contacts")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.ContactStatus", "Status")
                        .WithMany("Contacts")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactComment", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("Comments")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactPhoneNumber", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact_Tag", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Customers")
                        .HasForeignKey("AssignedUserID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.CustomerPhoneNumber", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer_Tag", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("Tags")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Tag", "Tag")
                        .WithMany("CustomerTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Deal", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("Deals")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Lead", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Leads")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("Leads")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.LeadStatus", "Status")
                        .WithMany("Leads")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Opportunity", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Opportunities")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("Opportunities")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.OpportunityStatus", "Status")
                        .WithMany("Opportunities")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool_Admin", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Pool_Admins")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Pool_Admins")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool_Users", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Pool_Users")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Pools")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Prospect", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Prospects")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("Prospects")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.ProspectStatus", "Status")
                        .WithMany("Prospects")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
