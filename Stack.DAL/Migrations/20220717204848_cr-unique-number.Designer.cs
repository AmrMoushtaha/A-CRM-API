// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stack.DAL;

namespace Stack.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220717204848_cr-unique-number")]
    partial class cruniquenumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Activity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<long>("ProcessFlowID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProcessFlowID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ActivitySection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long?>("SectionID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("SectionID");

                    b.ToTable("ActivitySections");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ActivityType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ProcessFlow", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<long?>("DealID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ContactID")
                        .IsUnique()
                        .HasFilter("[ContactID] IS NOT NULL");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DealID")
                        .IsUnique()
                        .HasFilter("[DealID] IS NOT NULL");

                    b.ToTable("ProcessFlows");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Section", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityTypeID")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasCreateInterest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCreateRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCreateResale")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDecisionalQuestions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestion", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDecisional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("SectionID")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.ToTable("SectionQuestions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionAnswer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivitySectionID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<long?>("QuestionID")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ActivitySectionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("SectionQuestionAnswers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionID")
                        .HasColumnType("bigint");

                    b.Property<string>("RoutesTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("SectionQuestionOptions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SelectedOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("SectionQuestionAnswerID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SectionQuestionOptionID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("SectionQuestionAnswerID")
                        .IsUnique()
                        .HasFilter("[SectionQuestionAnswerID] IS NOT NULL");

                    b.HasIndex("SectionQuestionOptionID");

                    b.ToTable("SelectedOptions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SubmissionDetails", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurrentStatus")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsStageChanged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatusChanged")
                        .HasColumnType("bit");

                    b.Property<string>("NewStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NewStatus")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ScheduledActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ScheduledActivityID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ActivityID")
                        .IsUnique();

                    b.HasIndex("ScheduledActivityID");

                    b.ToTable("SubmissionDetails");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Location", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentLocationID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ParentLocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Location_Pool", b =>
                {
                    b.Property<long>("LocationID")
                        .HasColumnType("bigint");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.HasKey("LocationID", "PoolID");

                    b.HasIndex("PoolID");

                    b.ToTable("Location_Pools");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasParent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ParentRoleID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemAuthorizations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SystemAuthorizations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.AuthorizationSection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AuthorizationSections");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.SectionAuthorization", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorizationSectionID")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorizationSectionID");

                    b.ToTable("SectionAuthorizations");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhase", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CRPhases");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhaseInput", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PhaseID")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PhaseID");

                    b.ToTable("CRPhaseInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhaseInputAnswer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InputID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RequestPhaseID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("InputID");

                    b.HasIndex("RequestPhaseID");

                    b.ToTable("CRPhaseInputAnswers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhaseInputOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("InputID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("InputID");

                    b.ToTable("CRPhaseInputOptions");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRTimeline", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CRTimelines");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRTimeline_Phase", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentPhaseID")
                        .HasColumnType("bigint");

                    b.Property<long>("PhaseID")
                        .HasColumnType("bigint");

                    b.Property<long>("TimelineID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PhaseID");

                    b.HasIndex("TimelineID");

                    b.ToTable("CRTimeline_Phases");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CR_Timeline", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RequestID")
                        .HasColumnType("bigint");

                    b.Property<long>("TimelineID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("RequestID");

                    b.HasIndex("TimelineID");

                    b.ToTable("CR_Timelines");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CR_Timeline_Phase", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RequestID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TimelinePhaseID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TimelinePhaseID");

                    b.ToTable("CR_Timeline_Phases");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CustomerRequest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DealID")
                        .HasColumnType("bigint");

                    b.Property<long?>("InterestID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RequestTypeID")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TimelineID")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueNumber")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("DealID");

                    b.HasIndex("RequestTypeID");

                    b.ToTable("CustomerRequests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CustomerRequestType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TimelineID")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TimelineID");

                    b.ToTable("CustomerRequestTypes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Channel.LeadSourceName", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChannelID")
                        .HasColumnType("bigint");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LeadSourceTypeID")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("LeadSourceTypeID");

                    b.ToTable("LeadSourceNames");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Channel.LeadSourceType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChannelID")
                        .HasColumnType("bigint");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ChannelID");

                    b.ToTable("LeadSourceTypes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Channels.Channel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Chat.Conversation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Chat.Message", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("SenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ConversationID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Chat.UsersConversations", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ConversationID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("ConversationID");

                    b.ToTable("UsersConversations");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Common.PoolConnectionID", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<long>("RecordID")
                        .HasColumnType("bigint");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PoolConnectionIDs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Common.SystemConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AutomaticUnassignmentDuration")
                        .HasColumnType("float");

                    b.Property<double>("LockDuration")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("SystemConfiguration");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CapacityCalculated")
                        .HasColumnType("bit");

                    b.Property<int?>("ChannelID")
                        .HasColumnType("int");

                    b.Property<long?>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForceUnlock_JobID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFresh")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int?>("LSNID")
                        .HasColumnType("int");

                    b.Property<int?>("LSTID")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long?>("StatusID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("CustomerID")
                        .IsUnique()
                        .HasFilter("[CustomerID] IS NOT NULL");

                    b.HasIndex("PoolID");

                    b.HasIndex("StatusID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactComment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ContactComments");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactPhoneNumber", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ContactPhoneNumbers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContactStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact_Favorite", b =>
                {
                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContactID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Contact_Favorites");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact_Tag", b =>
                {
                    b.Property<long>("ContactID")
                        .HasColumnType("bigint");

                    b.Property<long>("TagID")
                        .HasColumnType("bigint");

                    b.HasKey("ContactID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("Contact_Tags");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ChannelID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LSNID")
                        .HasColumnType("int");

                    b.Property<int?>("LSTID")
                        .HasColumnType("int");

                    b.Property<string>("LeadSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadSourceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.CustomerComment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerComments");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.CustomerPhoneNumber", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerPhoneNumber");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer_Tag", b =>
                {
                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<long>("TagID")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("Customer_Tags");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Deal", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActiveStageID")
                        .HasColumnType("bigint");

                    b.Property<int>("ActiveStageType")
                        .HasColumnType("int");

                    b.Property<long>("CustomerID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.DoneDeal", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.ToTable("DoneDeals");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.DoneDeal_Favorite", b =>
                {
                    b.Property<long>("RecordID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecordID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("DoneDeal_Favorites");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Lead", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<string>("ForceUnlock_JobID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFresh")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long?>("StatusID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.HasIndex("StatusID");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.LeadStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LeadStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Lead_Favorite", b =>
                {
                    b.Property<long>("RecordID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecordID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Lead_Favorites");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Opportunity", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<string>("ForceUnlock_JobID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFresh")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long?>("StatusID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.HasIndex("StatusID");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.OpportunityStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OpportunityStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Opportunity_Favorite", b =>
                {
                    b.Property<long>("RecordID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecordID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Opportunity_Favorites");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationType")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pools");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.PoolRequest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppliedActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<long?>("RecordID")
                        .HasColumnType("bigint");

                    b.Property<long?>("RecordStatusID")
                        .HasColumnType("bigint");

                    b.Property<int?>("RecordType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("RequesteeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Requestee_PoolID")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PoolID");

                    b.ToTable("PoolRequests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool_User", b =>
                {
                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PoolID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Pool_Users");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Prospect", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DealID")
                        .HasColumnType("bigint");

                    b.Property<string>("ForceUnlock_JobID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFresh")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<long>("PoolID")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long?>("StatusID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AssignedUserID");

                    b.HasIndex("DealID");

                    b.HasIndex("StatusID");

                    b.ToTable("Prospects");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ProspectStatus", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ProspectStatuses");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Prospect_Favorite", b =>
                {
                    b.Property<long>("RecordID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecordID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Prospect_Favorites");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Tag", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.Input", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AttributeID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("LabelAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PredefinedInputType")
                        .HasColumnType("int");

                    b.Property<long>("SectionID")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttributeID");

                    b.HasIndex("SectionID");

                    b.ToTable("Inputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.LAttribute", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPredefined")
                        .HasColumnType("bit");

                    b.Property<string>("LabelAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentAttributeID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentInputID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ParentAttributeID");

                    b.ToTable("LAttributes");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.LSection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LabelAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LevelID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("LSections");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.Level", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LabelAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Interest.LInterest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeparate")
                        .HasColumnType("bit");

                    b.Property<long>("LevelID")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerID")
                        .HasColumnType("bigint");

                    b.Property<int?>("OwnerType")
                        .HasColumnType("int");

                    b.Property<long?>("ParentLInterestID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.HasIndex("LocationID");

                    b.HasIndex("OwnerID");

                    b.ToTable("LInterests");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Interest.LInterestInput", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AttributeID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("InputID")
                        .HasColumnType("bigint");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LInterestID")
                        .HasColumnType("bigint");

                    b.Property<int?>("PredefinedInputType")
                        .HasColumnType("int");

                    b.Property<long?>("SelectedAttributeID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LInterestID");

                    b.ToTable("LInterestInputs");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Teams.Team", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentTeamID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Teams.Team_User", b =>
                {
                    b.Property<long>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TeamID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Team_Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Activity", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "ApplicationUser")
                        .WithMany("Activities")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Stack.Entities.Models.Modules.Activities.ProcessFlow", "ProcessFlow")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessFlowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ActivitySection", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.Activity", "Activity")
                        .WithMany("ActivitySections")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Stack.Entities.Models.Modules.Activities.Section", "Section")
                        .WithMany("ActivitySections")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.ProcessFlow", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithOne("ProcessFlow")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.ProcessFlow", "ContactID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("ProcessFlows")
                        .HasForeignKey("CustomerID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithOne("ProcessFlow")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.ProcessFlow", "DealID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.Section", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivityType", "ActivityType")
                        .WithMany("Sections")
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestion", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionAnswer", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivitySection", "ActivitySection")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ActivitySectionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestion", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SectionQuestionOption", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestion", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SelectedOption", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestionAnswer", "SectionQuestionAnswer")
                        .WithOne("SelectedOption")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.SelectedOption", "SectionQuestionAnswerID");

                    b.HasOne("Stack.Entities.Models.Modules.Activities.SectionQuestionOption", "SectionQuestionOption")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("SectionQuestionOptionID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Activities.SubmissionDetails", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Activities.Activity", "Activity")
                        .WithOne("SubmissionDetails")
                        .HasForeignKey("Stack.Entities.Models.Modules.Activities.SubmissionDetails", "ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Activities.ActivityType", "ScheduledActivity")
                        .WithMany("SubmissionDetails")
                        .HasForeignKey("ScheduledActivityID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Location", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Areas.Location", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("ParentLocationID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Areas.Location_Pool", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Areas.Location", "Location")
                        .WithMany("Pools")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Location_Pools")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Auth.SectionAuthorization", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.AuthorizationSection", "AuthorizationSection")
                        .WithMany("SectionAuthorizations")
                        .HasForeignKey("AuthorizationSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhaseInput", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CRPhase", "Phase")
                        .WithMany("Inputs")
                        .HasForeignKey("PhaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhaseInputAnswer", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CRPhaseInput", "Input")
                        .WithMany("Answers")
                        .HasForeignKey("InputID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CR.CR_Timeline_Phase", "RequestPhase")
                        .WithMany("Answers")
                        .HasForeignKey("RequestPhaseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRPhaseInputOption", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CRPhaseInput", "PhaseInput")
                        .WithMany("Options")
                        .HasForeignKey("InputID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CRTimeline_Phase", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CRPhase", "Phase")
                        .WithMany("Timelines")
                        .HasForeignKey("PhaseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CR.CRTimeline", "Timeline")
                        .WithMany("Phases")
                        .HasForeignKey("TimelineID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CR_Timeline", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CustomerRequest", "CustomerRequest")
                        .WithMany("Timeline")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CR.CRTimeline", "Timeline")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("TimelineID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CR_Timeline_Phase", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CRTimeline_Phase", "Timeline_Phase")
                        .WithMany("RequestTimelinePhaseDetails")
                        .HasForeignKey("TimelinePhaseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CustomerRequest", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("ContactID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("DealID");

                    b.HasOne("Stack.Entities.Models.Modules.CR.CustomerRequestType", "RequestType")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("RequestTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CR.CustomerRequestType", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CR.CRTimeline", "PhasesTimeline")
                        .WithMany("CustomerRequestTypes")
                        .HasForeignKey("TimelineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Channel.LeadSourceName", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Channel.LeadSourceType", null)
                        .WithMany("LeadSourceNames")
                        .HasForeignKey("ChannelID");

                    b.HasOne("Stack.Entities.Models.Modules.Channel.LeadSourceType", "LeadSourceType")
                        .WithMany()
                        .HasForeignKey("LeadSourceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Channel.LeadSourceType", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Channels.Channel", null)
                        .WithMany("LeadSourceType")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Chat.Message", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Chat.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Chat.UsersConversations", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("Stack.Entities.Models.Modules.Chat.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Common.PoolConnectionID", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("ConnectionIDs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Contacts")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithOne("Contact")
                        .HasForeignKey("Stack.Entities.Models.Modules.CustomerStage.Contact", "CustomerID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Contacts")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.ContactStatus", "Status")
                        .WithMany("Contacts")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactComment", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("Comments")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.ContactPhoneNumber", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact_Favorite", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("Favorites")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Contact_Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Contact_Tag", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Contact", "Contact")
                        .WithMany("Tags")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Customers")
                        .HasForeignKey("AssignedUserID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.CustomerComment", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.CustomerPhoneNumber", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Customer_Tag", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("Tags")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Tag", "Tag")
                        .WithMany("CustomerTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Deal", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Customer")
                        .WithMany("Deals")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.DoneDeal", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("DoneDeals")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.DoneDeal_Favorite", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.DoneDeal", "Record")
                        .WithMany("Favorites")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("DoneDeal_Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Lead", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Leads")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("Leads")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.LeadStatus", "Status")
                        .WithMany("Leads")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Lead_Favorite", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Lead", "Record")
                        .WithMany("Favorites")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Lead_Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Opportunity", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Opportunities")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("Opportunities")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.OpportunityStatus", "Status")
                        .WithMany("Opportunities")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Opportunity_Favorite", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Opportunity", "Record")
                        .WithMany("Favorites")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Opportunity_Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.PoolRequest", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Requests")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Pool_User", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Pool", "Pool")
                        .WithMany("Pool_Users")
                        .HasForeignKey("PoolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Pools")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Prospect", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "AssignedUser")
                        .WithMany("Prospects")
                        .HasForeignKey("AssignedUserID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Deal", "Deal")
                        .WithMany("Prospects")
                        .HasForeignKey("DealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.ProspectStatus", "Status")
                        .WithMany("Prospects")
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.CustomerStage.Prospect_Favorite", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Prospect", "Record")
                        .WithMany("Favorites")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Prospect_Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.Input", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Hierarchy.LAttribute", "Attribute")
                        .WithMany("Inputs")
                        .HasForeignKey("AttributeID");

                    b.HasOne("Stack.Entities.Models.Modules.Hierarchy.LSection", "Section")
                        .WithMany("Inputs")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.LAttribute", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Hierarchy.LAttribute", "ParentAttribute")
                        .WithMany()
                        .HasForeignKey("ParentAttributeID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Hierarchy.LSection", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Hierarchy.Level", "Level")
                        .WithMany("Sections")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Interest.LInterest", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Hierarchy.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Areas.Location", "Location")
                        .WithMany("LInterests")
                        .HasForeignKey("LocationID");

                    b.HasOne("Stack.Entities.Models.Modules.CustomerStage.Customer", "Owner")
                        .WithMany("SeparatedLInterests")
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Interest.LInterestInput", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Interest.LInterest", "LInterest")
                        .WithMany("LInterestInput")
                        .HasForeignKey("LInterestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stack.Entities.Models.Modules.Teams.Team_User", b =>
                {
                    b.HasOne("Stack.Entities.Models.Modules.Teams.Team", "Team")
                        .WithMany("Team_Users")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stack.Entities.Models.Modules.Auth.ApplicationUser", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
